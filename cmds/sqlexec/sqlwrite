#!/usr/bin/env python
#coding: utf-8

import os
import sys
import sqlite3

_usage = "sqlwrite <sql-file> <parameter-file>"
_version = "Sat Nov 30 16:32:58 JST 2024 fujis"
_docs = "https://github.com/ppdx999/cmdset"


def read_file(file):
    with open(file) as f:
        return f.read()


def kv2dict(kv):
    rdict = {}
    for line in kv.split('\n'):
        if not line:
            continue
        k, v = line.split(' ', 1)
        rdict[k.strip()] = v.strip()
    return rdict


if __name__ == '__main__':
    if sys.argv[1] in ['-h', '--help', '-v', '--version']:
        print("sqlwrite - print sql query result", file=sys.stderr)
        print("", file=sys.stderr)
        print("Usage: %s" % _usage, file=sys.stderr)
        print("Version: %s" % _version, file=sys.stderr)
        print("Docs: %s" % _docs, file=sys.stderr)
        sys.exit(1)

    if len(sys.argv) not in [2, 3]:
        print("Usage: %s" % _usage, file=sys.stderr)
        sys.exit(1)

    sql_file = sys.argv[1]
    param_file = sys.argv[2] if len(sys.argv) == 3 else None

    if not os.path.exists(sql_file):
        print("Error: %s not found" % sql_file, file=sys.stderr)
        sys.exit(1)

    if param_file and not os.path.exists(param_file):
        print("Error: %s not found" % param_file, file=sys.stderr)
        sys.exit(1)

    sql = read_file(sql_file)
    if param_file:
        params = kv2dict(read_file(param_file))
    else:
        params = None

    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        print("Error: DATABASE_URL is not set", file=sys.stderr)
        sys.exit(1)

    engine = database_url.split(':')[0]
    if engine == 'sqlite3':
        conn = sqlite3.connect(database_url.split(':///')[1])
    else:
        msg = "Error: unsupported database engine %s" % engine
        print(msg, file=sys.stderr)
        sys.exit(1)

    cursor = conn.cursor()
    if params:
        cursor.execute(sql, params)
    else:
        cursor.execute(sql)
    conn.commit()
    cursor.close()
    conn.close()
