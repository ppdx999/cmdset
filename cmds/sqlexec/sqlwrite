#!/usr/bin/env python
#coding: utf-8

import os
import sys
import sqlite3

_usage_options = ['-h', '--help', '-v', '--version']
_usage = "sqlwrite <sql-file> <parameter-file>"
_version = "Sat Nov 30 16:32:58 JST 2024 fujis"
_docs = "https://github.com/ppdx999/cmdset"


def usage():
    print("Usage: %s" % _usage, file=sys.stderr)
    print("Version: %s" % _version, file=sys.stderr)
    print("Docs: %s" % _docs, file=sys.stderr)


def read_file(file):
    if file == '-':
        file = "/dev/fd/0"
    with open(file) as f:
        return f.read()


def kv2dict(kv):
    rdict = {}
    for line in kv.split('\n'):
        if not line:
            continue
        k, v = line.split(' ', 1)
        rdict[k.strip()] = v.strip()
    return rdict


def take(array, i, default=None):
    return array[i] if len(array) > i else default


if __name__ == '__main__':
    a1 = take(sys.argv, 1, '-')
    a2 = take(sys.argv, 2, None)
    if a1 in _usage_options:
        usage()
        sys.exit(1)

    sql = read_file(a1)
    params = kv2dict(read_file(a2)) if a2 else None

    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        print("Error: DATABASE_URL is not set", file=sys.stderr)
        sys.exit(1)

    engine = database_url.split(':')[0]
    if engine == 'sqlite3':
        conn = sqlite3.connect(database_url.split(':///')[1])
        cursor = conn.cursor()
        cursor.execute("PRAGMA foreign_keys = ON")
        if params:
            cursor.execute(sql, params)
        else:
            cursor.execute(sql)
        conn.commit()
        cursor.close()
        conn.close()
    else:
        msg = "Error: unsupported database engine %s" % engine
        print(msg, file=sys.stderr)
        sys.exit(1)
