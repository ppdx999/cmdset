#!/usr/bin/env -S awk -f ${_} --

function usage() {
    print "validate-kv - validate key-value format data" > "/dev/stderr"
    print "" > "/dev/stderr"
    print "Usage: validate-kv <rule file> <data file>" > "/dev/stderr"
    print "Version: fujis Tue Nov 26 18:27:03 JST 2024" > "/dev/stderr"
    exit 1
}

BEGIN {
  # Parse Options
  for (i = 1; i < ARGC; i++) {
    if ( ARGV[i] == "--") {
      break
    } else if ( \
      ARGV[i] == "-h"         ||
      ARGV[i] == "--help"     ||
      ARGV[i] == "-v"         ||
      ARGV[i] == "--version"  ||
      ARGC == 1               \
    ) {
      usage()
    }
  }
  # remove script name
  delete ARGV[1]
}

######################################################################
# Main Routine
BEGIN {
  exit_code = 0
  rule_and_regex_map["int"] = "^-?[0-9]+$"
  rule_and_regex_map["number"] = "^-?[0-9]+(\\.[0-9]+)?$"
  rule_and_regex_map["digit"] = "^[0-9]+$"
  rule_and_regex_map["email"] = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
  rule_and_regex_map["alnum"] = "^[a-zA-Z0-9]+$"
  rule_and_regex_map["alpha"] = "^[a-zA-Z]+$"
  rule_and_regex_map["date"] = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
  rule_and_regex_map["time"] = "^[0-9]{2}:[0-9]{2}:[0-9]{2}$"
  rule_and_regex_map["datetime"] = "^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$"
  rule_and_regex_map["datetime_tz"] = "^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} [+-][0-9]{2}:[0-9]{2}$"
  rule_and_regex_map["zipcode_jp"] = "^[0-9]{3}-[0-9]{4}$"
  rule_and_regex_map["phone_number_jp"] = "^[0-9]{2,4}-[0-9]{2,4}-[0-9]{4}$"
  rule_and_regex_map["text"] = ".*"
}

# Skip comments and empty lines
/^#/ || NF == 0 {
    next
}

# Parse Rule
NR == FNR {
  key = $1;
  sub(key, "", $0);
  sub(/^ */, "", $0);
  value = $0;
  # Optional rule can be just ignored because this
  # program handles all fileds as optional in default.
  gsub(/optional/, "", value)
  if (gsub(/required/, "", value)) {
    required[key] = 1
  }
  rule_map[key] = value
  next
}

# Validate data
{
  print $0
  key = $1;
  sub(key, "", $0);
  sub(/^ */, "", $0);
  value = $0;


  # todo: error when ignore option is not set
  if (!(key in rule_map)) next

  delete required[key]

  n = split(rule_map[key], rule_list, " ")

  for (i = 1; i <= n; i++) {
    rule = rule_list[i]

    if (rule in rule_and_regex_map) {
      if (value !~ rule_and_regex_map[rule]) {
        exit_code = 1
        print key, rule > "/dev/stderr"
      }
    } else if (rule == "min_length") {
      if (length(value) < rule_list[++i]) {
        exit_code = 1
        print key, "min_length", rule_list[i] > "/dev/stderr"
      }
    } else if (rule == "max_length") {
      if (length(value) > rule_list[++i]) {
        exit_code = 1
        print key, "max_length", rule_list[i] > "/dev/stderr"
      }
    } else if (rule == "min_value") {
      if (value + 0 < rule_list[++i] + 0) {
        exit_code = 1
        print key, "min_value", rule_list[i] > "/dev/stderr"
      }
    } else if (rule == "max_value") {
      if (value + 0 > rule_list[++i] + 0) {
        exit_code = 1
        print key, "max_value", rule_list[i] > "/dev/stderr"
      }
    } else if (rule == "regex") {
      if (value !~ rule_list[++i]) {
        exit_code = 1
        print key, "regex", rule_list[i] > "/dev/stderr"
      }
    } else if (rule == "one_of[") {
      while (i <= n && rule_list[++i] != "]") {
        if (rule_list[i] == value) break
        msg = msg " " rule_list[i]
      }
      sub(/^ /, "", msg)
      if (rule_list[i] == "]") {
        exit_code = 1
        print key, "one_of[", msg, "]" > "/dev/stderr"
      } else while (rule_list[++i] != "]") {
        if (i > n) {
          print "Syntax error: missing ']'" > "/dev/stderr"
          break
        }
      }
    } else {
      exit_code = 1
      print "unknown_rule", rule > "/dev/stderr"
    }
  }
}

END {
  for (key in required) {
    print key " required" > "/dev/stderr"
    exit_code = 1
  }
  exit exit_code
}
