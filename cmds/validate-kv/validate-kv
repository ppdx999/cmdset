#!/usr/bin/env -S awk -f ${_} --

function usage() {
    print "validate-kv - validate key-value format data"
    print ""
    print "Usage: validate-kv <rule file> <data file>"
    print "Options: if <target file> is not specified, read from stdin"
    print "Version: fujis Tue Nov 26 18:27:03 JST 2024"
    exit 1
}

BEGIN {
  # Parse Options
  for (i = 1; i < ARGC; i++) {
    if ( ARGV[i] == "--") {
      break
    } else if ( ARGV[i] == "-h"         ||
                ARGV[i] == "--help"     ||
                ARGV[i] == "-v"         ||
                ARGV[i] == "--version"  ||
                ARGC == 1                )
    {
      usage()
    }
  }
  # remove script name
  delete ARGV[1]
}

######################################################################
# Main Routine
BEGIN {
  exit_code = 0
}

NR == FNR {
  for (i = 2; i <= NF; i++) {
    rules[$1] = rules[$1] " " $i
  }
  next
}

{
  if (!($1 in rules)) {
    next
  }

  n = split(rules[$1], rule_list, " ")
  if (rule_list[1] == "alnum") {
    if ($2 !~ /^[a-za-z0-9]+$/) {
      print $1 " is not alnum"
      exit_code = 1
    }
  } else if (rule_list[1] == "int") {
    if ($2 !~ /^[0-9]+$/) {
      print $1 " is not integer"
      exit_code = 1
    }
  } else if (rule_list[1] == "float") {
    if ($2 !~ /^[0-9]+(\.[0-9]+)?$/) {
      print $1 " is not float"
      exit_code = 1
    }
  } else if (rule_list[1] == "email") {
    if ($2 !~ /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/) {
      print $1 " is not email"
      exit_code = 1
    }
  } else if (rule_list[1] == "url") {
    if ($2 !~ /^https?:\/\/[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/) {
      print $1 " is not url"
      exit_code = 1
    }
  }

  for (i = 2; i <= n; i++) {
    if (rule_list[i] == "max") {
      if (rule_list[1] == "int" || rule_list[1] == "float") {
        if ($2 > rule_list[++i]) {
          print $1 " is greater than " rule_list[i]
          exit_code = 1
        }
      } else if (rule_list[1] == "text") {
        if (length($2) > rule_list[++i]) {
          print $1 " is greater than " rule_list[i]
          exit_code = 1
        }
      } else {
        print $1 "Unknown rule: " rule " for type " rule_list[1]
        exit_code = 1
      }
      next
    } else if (rule_list[i] == "min") {
      if ($2 < rule_list[++i]) {
        print $1 " is less than " rule_list[i]
        exit_code = 1
      }
      next
    } else if (rule_list[i] == "len") {
      if (length($2) != rule_list[++i]) {
        print $1 " is not " rule_list[i] " length"
        exit_code = 1
      }
      next
    } else if (rule_list[i] == "match") {
      if ($2 !~ rule_list[++i]) {
        print $1 " is not match " rule_list[i]
        exit_code = 1
      }
      next
    } else {
      print "Unknown rule: " rule
      exit_code = 1
    }
  }
}

END {
  exit exit_code
}
