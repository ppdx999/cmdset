#!/usr/bin/env -S awk -f ${_} --

function usage() {
    print "validate-kv - validate key-value format data"
    print ""
    print "Usage: validate-kv <rule file> <data file>"
    print "Version: fujis Tue Nov 26 18:27:03 JST 2024"
    exit 1
}

BEGIN {
  # Parse Options
  for (i = 1; i < ARGC; i++) {
    if ( ARGV[i] == "--") {
      break
    } else if ( \
      ARGV[i] == "-h"         ||
      ARGV[i] == "--help"     ||
      ARGV[i] == "-v"         ||
      ARGV[i] == "--version"  ||
      ARGC == 1               \
    ) {
      usage()
    }
  }
  # remove script name
  delete ARGV[1]
}

######################################################################
# Main Routine
BEGIN {
  exit_code = 0
}

# Skip comments and empty lines
/^#/ || NF == 0 {
    next
}

# Parse Rule
NR == FNR {
  rule_map[$1] = substr($0, index($0, $2))
  next
}

# Validate data
{
  key = $1; value = substr($0, index($0, $2))

  # todo: error when ignore option is not set
  if (!(key in rule_map)) next

  n = split(rule_map[key], rule_list, " ")

  for (i = 1; i <= n; i++) {
    rule = rule_list[i]
    invalid_rule = ""

    if ( rule == "int" && value !~ /^-?[0-9]+$/)
        invalid_rule = invalid_rule " int"

    if ( rule == "number" && value !~ /^-?[0-9]+(\.[0-9]+)?$/)
        invalid_rule = invalid_rule " number"

    if ( rule == "digit" && value !~ /^[0-9]+$/)
        invalid_rule = invalid_rule " digit"

    if ( rule == "email" && value !~ /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/)
        invalid_rule = invalid_rule " email"

    if ( rule == "alnum" && value !~ /^[a-zA-Z0-9]+$/) 
        invalid_rule = invalid_rule " alnum"

    if ( rule == "alpha" && value !~ /^[a-zA-Z]+$/)
        invalid_rule = invalid_rule " alpha"

    if ( rule == "min_length" && length(value) < rule_list[++i])
        invalid_rule = invalid_rule " min_length " rule_list[i]

    if ( rule == "max_length" && length(value) > rule_list[++i])
        invalid_rule = invalid_rule " max_length " rule_list[i]

    if (invalid_rule != "") {
      print key invalid_rule
      exit_code = 1
    }
  }
}

END {
  exit exit_code
}
